// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type HostgroupMembershipInitParameters struct {

	// (String, Deprecated) deprecated Host to add. Will be replaced by hosts.
	// **deprecated** Host to add. Will be replaced by hosts.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// (String, Deprecated) deprecated Hostgroup to add. Will be replaced by hostgroups.
	// **deprecated** Hostgroup to add. Will be replaced by hostgroups.
	Hostgroup *string `json:"hostgroup,omitempty" tf:"hostgroup,omitempty"`

	// (List of String) Hostgroups to add as hostgroup members
	// Hostgroups to add as hostgroup members
	Hostgroups []*string `json:"hostgroups,omitempty" tf:"hostgroups,omitempty"`

	// (List of String) Hosts to add as hostgroup members
	// Hosts to add as hostgroup members
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// (String) Unique identifier to differentiate multiple hostgroup membership resources on the same hostgroup. Manadatory for using hosts/hostgroups configurations.
	// Unique identifier to differentiate multiple hostgroup membership resources on the same hostgroup. Manadatory for using hosts/hostgroups configurations.
	Identifier *string `json:"identifier,omitempty" tf:"identifier,omitempty"`

	// (String) Hostgroup name
	// Hostgroup name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type HostgroupMembershipObservation struct {

	// (String, Deprecated) deprecated Host to add. Will be replaced by hosts.
	// **deprecated** Host to add. Will be replaced by hosts.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// (String, Deprecated) deprecated Hostgroup to add. Will be replaced by hostgroups.
	// **deprecated** Hostgroup to add. Will be replaced by hostgroups.
	Hostgroup *string `json:"hostgroup,omitempty" tf:"hostgroup,omitempty"`

	// (List of String) Hostgroups to add as hostgroup members
	// Hostgroups to add as hostgroup members
	Hostgroups []*string `json:"hostgroups,omitempty" tf:"hostgroups,omitempty"`

	// (List of String) Hosts to add as hostgroup members
	// Hosts to add as hostgroup members
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// (String) ID of the resource
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Unique identifier to differentiate multiple hostgroup membership resources on the same hostgroup. Manadatory for using hosts/hostgroups configurations.
	// Unique identifier to differentiate multiple hostgroup membership resources on the same hostgroup. Manadatory for using hosts/hostgroups configurations.
	Identifier *string `json:"identifier,omitempty" tf:"identifier,omitempty"`

	// (String) Hostgroup name
	// Hostgroup name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type HostgroupMembershipParameters struct {

	// (String, Deprecated) deprecated Host to add. Will be replaced by hosts.
	// **deprecated** Host to add. Will be replaced by hosts.
	// +kubebuilder:validation:Optional
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// (String, Deprecated) deprecated Hostgroup to add. Will be replaced by hostgroups.
	// **deprecated** Hostgroup to add. Will be replaced by hostgroups.
	// +kubebuilder:validation:Optional
	Hostgroup *string `json:"hostgroup,omitempty" tf:"hostgroup,omitempty"`

	// (List of String) Hostgroups to add as hostgroup members
	// Hostgroups to add as hostgroup members
	// +kubebuilder:validation:Optional
	Hostgroups []*string `json:"hostgroups,omitempty" tf:"hostgroups,omitempty"`

	// (List of String) Hosts to add as hostgroup members
	// Hosts to add as hostgroup members
	// +kubebuilder:validation:Optional
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// (String) Unique identifier to differentiate multiple hostgroup membership resources on the same hostgroup. Manadatory for using hosts/hostgroups configurations.
	// Unique identifier to differentiate multiple hostgroup membership resources on the same hostgroup. Manadatory for using hosts/hostgroups configurations.
	// +kubebuilder:validation:Optional
	Identifier *string `json:"identifier,omitempty" tf:"identifier,omitempty"`

	// (String) Hostgroup name
	// Hostgroup name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

// HostgroupMembershipSpec defines the desired state of HostgroupMembership
type HostgroupMembershipSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     HostgroupMembershipParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider HostgroupMembershipInitParameters `json:"initProvider,omitempty"`
}

// HostgroupMembershipStatus defines the observed state of HostgroupMembership.
type HostgroupMembershipStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        HostgroupMembershipObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// HostgroupMembership is the Schema for the HostgroupMemberships API. FreeIPA User Group Membership resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,freeipa}
type HostgroupMembership struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   HostgroupMembershipSpec   `json:"spec"`
	Status HostgroupMembershipStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HostgroupMembershipList contains a list of HostgroupMemberships
type HostgroupMembershipList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []HostgroupMembership `json:"items"`
}

// Repository type metadata.
var (
	HostgroupMembership_Kind             = "HostgroupMembership"
	HostgroupMembership_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: HostgroupMembership_Kind}.String()
	HostgroupMembership_KindAPIVersion   = HostgroupMembership_Kind + "." + CRDGroupVersion.String()
	HostgroupMembership_GroupVersionKind = CRDGroupVersion.WithKind(HostgroupMembership_Kind)
)

func init() {
	SchemeBuilder.Register(&HostgroupMembership{}, &HostgroupMembershipList{})
}
