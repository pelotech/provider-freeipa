// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PolicyUserMembershipInitParameters struct {

	// (String, Deprecated) deprecated User group to add to the HBAC policy
	// **deprecated** User group to add to the HBAC policy
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	// (List of String) List of user groups to add to the HBAC policy
	// List of user groups to add to the HBAC policy
	Groups []*string `json:"groups,omitempty" tf:"groups,omitempty"`

	// (String) Unique identifier to differentiate multiple HBAC policy user membership resources on the same HBAC policy. Manadatory for using users/groups configurations.
	// Unique identifier to differentiate multiple HBAC policy user membership resources on the same HBAC policy. Manadatory for using users/groups configurations.
	Identifier *string `json:"identifier,omitempty" tf:"identifier,omitempty"`

	// (String) HBAC policy name
	// HBAC policy name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String, Deprecated) deprecated User FDQN the policy is applied to
	// **deprecated** User FDQN the policy is applied to
	User *string `json:"user,omitempty" tf:"user,omitempty"`

	// (List of String) List of user FQDNs to add to the HBAC policy
	// List of user FQDNs to add to the HBAC policy
	Users []*string `json:"users,omitempty" tf:"users,omitempty"`
}

type PolicyUserMembershipObservation struct {

	// (String, Deprecated) deprecated User group to add to the HBAC policy
	// **deprecated** User group to add to the HBAC policy
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	// (List of String) List of user groups to add to the HBAC policy
	// List of user groups to add to the HBAC policy
	Groups []*string `json:"groups,omitempty" tf:"groups,omitempty"`

	// (String) ID of the resource
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Unique identifier to differentiate multiple HBAC policy user membership resources on the same HBAC policy. Manadatory for using users/groups configurations.
	// Unique identifier to differentiate multiple HBAC policy user membership resources on the same HBAC policy. Manadatory for using users/groups configurations.
	Identifier *string `json:"identifier,omitempty" tf:"identifier,omitempty"`

	// (String) HBAC policy name
	// HBAC policy name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String, Deprecated) deprecated User FDQN the policy is applied to
	// **deprecated** User FDQN the policy is applied to
	User *string `json:"user,omitempty" tf:"user,omitempty"`

	// (List of String) List of user FQDNs to add to the HBAC policy
	// List of user FQDNs to add to the HBAC policy
	Users []*string `json:"users,omitempty" tf:"users,omitempty"`
}

type PolicyUserMembershipParameters struct {

	// (String, Deprecated) deprecated User group to add to the HBAC policy
	// **deprecated** User group to add to the HBAC policy
	// +kubebuilder:validation:Optional
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	// (List of String) List of user groups to add to the HBAC policy
	// List of user groups to add to the HBAC policy
	// +kubebuilder:validation:Optional
	Groups []*string `json:"groups,omitempty" tf:"groups,omitempty"`

	// (String) Unique identifier to differentiate multiple HBAC policy user membership resources on the same HBAC policy. Manadatory for using users/groups configurations.
	// Unique identifier to differentiate multiple HBAC policy user membership resources on the same HBAC policy. Manadatory for using users/groups configurations.
	// +kubebuilder:validation:Optional
	Identifier *string `json:"identifier,omitempty" tf:"identifier,omitempty"`

	// (String) HBAC policy name
	// HBAC policy name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String, Deprecated) deprecated User FDQN the policy is applied to
	// **deprecated** User FDQN the policy is applied to
	// +kubebuilder:validation:Optional
	User *string `json:"user,omitempty" tf:"user,omitempty"`

	// (List of String) List of user FQDNs to add to the HBAC policy
	// List of user FQDNs to add to the HBAC policy
	// +kubebuilder:validation:Optional
	Users []*string `json:"users,omitempty" tf:"users,omitempty"`
}

// PolicyUserMembershipSpec defines the desired state of PolicyUserMembership
type PolicyUserMembershipSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PolicyUserMembershipParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PolicyUserMembershipInitParameters `json:"initProvider,omitempty"`
}

// PolicyUserMembershipStatus defines the observed state of PolicyUserMembership.
type PolicyUserMembershipStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicyUserMembershipObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// PolicyUserMembership is the Schema for the PolicyUserMemberships API. FreeIPA HBAC policy host membership resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,freeipa}
type PolicyUserMembership struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   PolicyUserMembershipSpec   `json:"spec"`
	Status PolicyUserMembershipStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyUserMembershipList contains a list of PolicyUserMemberships
type PolicyUserMembershipList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PolicyUserMembership `json:"items"`
}

// Repository type metadata.
var (
	PolicyUserMembership_Kind             = "PolicyUserMembership"
	PolicyUserMembership_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PolicyUserMembership_Kind}.String()
	PolicyUserMembership_KindAPIVersion   = PolicyUserMembership_Kind + "." + CRDGroupVersion.String()
	PolicyUserMembership_GroupVersionKind = CRDGroupVersion.WithKind(PolicyUserMembership_Kind)
)

func init() {
	SchemeBuilder.Register(&PolicyUserMembership{}, &PolicyUserMembershipList{})
}
