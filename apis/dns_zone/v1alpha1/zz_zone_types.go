// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ZoneInitParameters struct {

	// mail address
	// Administrator e-mail address
	AdminEmailAddress *string `json:"adminEmailAddress,omitempty" tf:"admin_email_address,omitempty"`

	// (Boolean) Allow inline DNSSEC signing of records in the zone
	// Allow inline DNSSEC signing of records in the zone
	AllowInlineDNSSECSigning *bool `json:"allowInlineDnssecSigning,omitempty" tf:"allow_inline_dnssec_signing,omitempty"`

	// (Boolean) Allow synchronization of forward (A, AAAA) and reverse (PTR) records in the zone
	// Allow synchronization of forward (A, AAAA) and reverse (PTR) records in the zone
	AllowPrtSync *bool `json:"allowPrtSync,omitempty" tf:"allow_prt_sync,omitempty"`

	// (String) Semicolon separated list of IP addresses or networks which are allowed to issue queries
	// Semicolon separated list of IP addresses or networks which are allowed to issue queries
	AllowQuery *string `json:"allowQuery,omitempty" tf:"allow_query,omitempty"`

	// (String) Semicolon separated list of IP addresses or networks which are allowed to transfer the zone
	// Semicolon separated list of IP addresses or networks which are allowed to transfer the zone
	AllowTransfer *string `json:"allowTransfer,omitempty" tf:"allow_transfer,omitempty"`

	// (String) Authoritative nameserver domain name
	// Authoritative nameserver domain name
	AuthoritativeNameserver *string `json:"authoritativeNameserver,omitempty" tf:"authoritative_nameserver,omitempty"`

	// (String) BIND update policy
	// BIND update policy
	BindUpdatePolicy *string `json:"bindUpdatePolicy,omitempty" tf:"bind_update_policy,omitempty"`

	// (Number) Time to live for records without explicit TTL definition
	// Time to live for records without explicit TTL definition
	DefaultTTL *float64 `json:"defaultTtl,omitempty" tf:"default_ttl,omitempty"`

	// (Boolean) Allow disabled the zone
	// Allow disabled the zone
	DisableZone *bool `json:"disableZone,omitempty" tf:"disable_zone,omitempty"`

	// (Boolean) Allow dynamic updates
	// Allow dynamic updates
	DynamicUpdates *bool `json:"dynamicUpdates,omitempty" tf:"dynamic_updates,omitempty"`

	// (Boolean) Allow create the reverse zone
	// Allow create the reverse zone
	IsReverseZone *bool `json:"isReverseZone,omitempty" tf:"is_reverse_zone,omitempty"`

	// (String) NSEC3PARAM record for zone in format: hash_algorithm flags iterations salt
	// NSEC3PARAM record for zone in format: hash_algorithm flags iterations salt
	Nsec3ParamRecord *string `json:"nsec3paramRecord,omitempty" tf:"nsec3param_record,omitempty"`

	// (Boolean) Force DNS zone creation even if nameserver is not resolvable
	// Force DNS zone creation even if nameserver is not resolvable
	SkipNameserverCheck *bool `json:"skipNameserverCheck,omitempty" tf:"skip_nameserver_check,omitempty"`

	// (Boolean) Force DNS zone creation even if it will overlap with an existing zone
	// Force DNS zone creation even if it will overlap with an existing zone
	SkipOverlapCheck *bool `json:"skipOverlapCheck,omitempty" tf:"skip_overlap_check,omitempty"`

	// (Number) SOA record expire time
	// SOA record expire time
	SoaExpire *float64 `json:"soaExpire,omitempty" tf:"soa_expire,omitempty"`

	// (Number) How long should negative responses be cached
	// How long should negative responses be cached
	SoaMinimum *float64 `json:"soaMinimum,omitempty" tf:"soa_minimum,omitempty"`

	// (Number) SOA record refresh time
	// SOA record refresh time
	SoaRefresh *float64 `json:"soaRefresh,omitempty" tf:"soa_refresh,omitempty"`

	// (Number) SOA record retry time
	// SOA record retry time
	SoaRetry *float64 `json:"soaRetry,omitempty" tf:"soa_retry,omitempty"`

	// (Number) Time to live for records at zone apex
	// Time to live for records at zone apex
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// zone forwarders. A custom port can be specified for each forwarder using a standard format IP_ADDRESS port PORT
	// Per-zone forwarders. A custom port can be specified for each forwarder using a standard format IP_ADDRESS port PORT
	ZoneForwarders []*string `json:"zoneForwarders,omitempty" tf:"zone_forwarders,omitempty"`

	// (String) Zone name (FQDN)
	// Zone name (FQDN)
	ZoneName *string `json:"zoneName,omitempty" tf:"zone_name,omitempty"`
}

type ZoneObservation struct {

	// mail address
	// Administrator e-mail address
	AdminEmailAddress *string `json:"adminEmailAddress,omitempty" tf:"admin_email_address,omitempty"`

	// (Boolean) Allow inline DNSSEC signing of records in the zone
	// Allow inline DNSSEC signing of records in the zone
	AllowInlineDNSSECSigning *bool `json:"allowInlineDnssecSigning,omitempty" tf:"allow_inline_dnssec_signing,omitempty"`

	// (Boolean) Allow synchronization of forward (A, AAAA) and reverse (PTR) records in the zone
	// Allow synchronization of forward (A, AAAA) and reverse (PTR) records in the zone
	AllowPrtSync *bool `json:"allowPrtSync,omitempty" tf:"allow_prt_sync,omitempty"`

	// (String) Semicolon separated list of IP addresses or networks which are allowed to issue queries
	// Semicolon separated list of IP addresses or networks which are allowed to issue queries
	AllowQuery *string `json:"allowQuery,omitempty" tf:"allow_query,omitempty"`

	// (String) Semicolon separated list of IP addresses or networks which are allowed to transfer the zone
	// Semicolon separated list of IP addresses or networks which are allowed to transfer the zone
	AllowTransfer *string `json:"allowTransfer,omitempty" tf:"allow_transfer,omitempty"`

	// (String) Authoritative nameserver domain name
	// Authoritative nameserver domain name
	AuthoritativeNameserver *string `json:"authoritativeNameserver,omitempty" tf:"authoritative_nameserver,omitempty"`

	// (String) BIND update policy
	// BIND update policy
	BindUpdatePolicy *string `json:"bindUpdatePolicy,omitempty" tf:"bind_update_policy,omitempty"`

	// (String) Real zone name compatible with ARPA (ie: domain.tld.)
	// Real zone name compatible with ARPA (ie: `domain.tld.`)
	ComputedZoneName *string `json:"computedZoneName,omitempty" tf:"computed_zone_name,omitempty"`

	// (Number) Time to live for records without explicit TTL definition
	// Time to live for records without explicit TTL definition
	DefaultTTL *float64 `json:"defaultTtl,omitempty" tf:"default_ttl,omitempty"`

	// (Boolean) Allow disabled the zone
	// Allow disabled the zone
	DisableZone *bool `json:"disableZone,omitempty" tf:"disable_zone,omitempty"`

	// (Boolean) Allow dynamic updates
	// Allow dynamic updates
	DynamicUpdates *bool `json:"dynamicUpdates,omitempty" tf:"dynamic_updates,omitempty"`

	// (String) ID of the resource
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Boolean) Allow create the reverse zone
	// Allow create the reverse zone
	IsReverseZone *bool `json:"isReverseZone,omitempty" tf:"is_reverse_zone,omitempty"`

	// (String) NSEC3PARAM record for zone in format: hash_algorithm flags iterations salt
	// NSEC3PARAM record for zone in format: hash_algorithm flags iterations salt
	Nsec3ParamRecord *string `json:"nsec3paramRecord,omitempty" tf:"nsec3param_record,omitempty"`

	// (Boolean) Force DNS zone creation even if nameserver is not resolvable
	// Force DNS zone creation even if nameserver is not resolvable
	SkipNameserverCheck *bool `json:"skipNameserverCheck,omitempty" tf:"skip_nameserver_check,omitempty"`

	// (Boolean) Force DNS zone creation even if it will overlap with an existing zone
	// Force DNS zone creation even if it will overlap with an existing zone
	SkipOverlapCheck *bool `json:"skipOverlapCheck,omitempty" tf:"skip_overlap_check,omitempty"`

	// (Number) SOA record expire time
	// SOA record expire time
	SoaExpire *float64 `json:"soaExpire,omitempty" tf:"soa_expire,omitempty"`

	// (Number) How long should negative responses be cached
	// How long should negative responses be cached
	SoaMinimum *float64 `json:"soaMinimum,omitempty" tf:"soa_minimum,omitempty"`

	// (Number) SOA record refresh time
	// SOA record refresh time
	SoaRefresh *float64 `json:"soaRefresh,omitempty" tf:"soa_refresh,omitempty"`

	// (Number) SOA record retry time
	// SOA record retry time
	SoaRetry *float64 `json:"soaRetry,omitempty" tf:"soa_retry,omitempty"`

	// (Number) Time to live for records at zone apex
	// Time to live for records at zone apex
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// zone forwarders. A custom port can be specified for each forwarder using a standard format IP_ADDRESS port PORT
	// Per-zone forwarders. A custom port can be specified for each forwarder using a standard format IP_ADDRESS port PORT
	ZoneForwarders []*string `json:"zoneForwarders,omitempty" tf:"zone_forwarders,omitempty"`

	// (String) Zone name (FQDN)
	// Zone name (FQDN)
	ZoneName *string `json:"zoneName,omitempty" tf:"zone_name,omitempty"`
}

type ZoneParameters struct {

	// mail address
	// Administrator e-mail address
	// +kubebuilder:validation:Optional
	AdminEmailAddress *string `json:"adminEmailAddress,omitempty" tf:"admin_email_address,omitempty"`

	// (Boolean) Allow inline DNSSEC signing of records in the zone
	// Allow inline DNSSEC signing of records in the zone
	// +kubebuilder:validation:Optional
	AllowInlineDNSSECSigning *bool `json:"allowInlineDnssecSigning,omitempty" tf:"allow_inline_dnssec_signing,omitempty"`

	// (Boolean) Allow synchronization of forward (A, AAAA) and reverse (PTR) records in the zone
	// Allow synchronization of forward (A, AAAA) and reverse (PTR) records in the zone
	// +kubebuilder:validation:Optional
	AllowPrtSync *bool `json:"allowPrtSync,omitempty" tf:"allow_prt_sync,omitempty"`

	// (String) Semicolon separated list of IP addresses or networks which are allowed to issue queries
	// Semicolon separated list of IP addresses or networks which are allowed to issue queries
	// +kubebuilder:validation:Optional
	AllowQuery *string `json:"allowQuery,omitempty" tf:"allow_query,omitempty"`

	// (String) Semicolon separated list of IP addresses or networks which are allowed to transfer the zone
	// Semicolon separated list of IP addresses or networks which are allowed to transfer the zone
	// +kubebuilder:validation:Optional
	AllowTransfer *string `json:"allowTransfer,omitempty" tf:"allow_transfer,omitempty"`

	// (String) Authoritative nameserver domain name
	// Authoritative nameserver domain name
	// +kubebuilder:validation:Optional
	AuthoritativeNameserver *string `json:"authoritativeNameserver,omitempty" tf:"authoritative_nameserver,omitempty"`

	// (String) BIND update policy
	// BIND update policy
	// +kubebuilder:validation:Optional
	BindUpdatePolicy *string `json:"bindUpdatePolicy,omitempty" tf:"bind_update_policy,omitempty"`

	// (Number) Time to live for records without explicit TTL definition
	// Time to live for records without explicit TTL definition
	// +kubebuilder:validation:Optional
	DefaultTTL *float64 `json:"defaultTtl,omitempty" tf:"default_ttl,omitempty"`

	// (Boolean) Allow disabled the zone
	// Allow disabled the zone
	// +kubebuilder:validation:Optional
	DisableZone *bool `json:"disableZone,omitempty" tf:"disable_zone,omitempty"`

	// (Boolean) Allow dynamic updates
	// Allow dynamic updates
	// +kubebuilder:validation:Optional
	DynamicUpdates *bool `json:"dynamicUpdates,omitempty" tf:"dynamic_updates,omitempty"`

	// (Boolean) Allow create the reverse zone
	// Allow create the reverse zone
	// +kubebuilder:validation:Optional
	IsReverseZone *bool `json:"isReverseZone,omitempty" tf:"is_reverse_zone,omitempty"`

	// (String) NSEC3PARAM record for zone in format: hash_algorithm flags iterations salt
	// NSEC3PARAM record for zone in format: hash_algorithm flags iterations salt
	// +kubebuilder:validation:Optional
	Nsec3ParamRecord *string `json:"nsec3paramRecord,omitempty" tf:"nsec3param_record,omitempty"`

	// (Boolean) Force DNS zone creation even if nameserver is not resolvable
	// Force DNS zone creation even if nameserver is not resolvable
	// +kubebuilder:validation:Optional
	SkipNameserverCheck *bool `json:"skipNameserverCheck,omitempty" tf:"skip_nameserver_check,omitempty"`

	// (Boolean) Force DNS zone creation even if it will overlap with an existing zone
	// Force DNS zone creation even if it will overlap with an existing zone
	// +kubebuilder:validation:Optional
	SkipOverlapCheck *bool `json:"skipOverlapCheck,omitempty" tf:"skip_overlap_check,omitempty"`

	// (Number) SOA record expire time
	// SOA record expire time
	// +kubebuilder:validation:Optional
	SoaExpire *float64 `json:"soaExpire,omitempty" tf:"soa_expire,omitempty"`

	// (Number) How long should negative responses be cached
	// How long should negative responses be cached
	// +kubebuilder:validation:Optional
	SoaMinimum *float64 `json:"soaMinimum,omitempty" tf:"soa_minimum,omitempty"`

	// (Number) SOA record refresh time
	// SOA record refresh time
	// +kubebuilder:validation:Optional
	SoaRefresh *float64 `json:"soaRefresh,omitempty" tf:"soa_refresh,omitempty"`

	// (Number) SOA record retry time
	// SOA record retry time
	// +kubebuilder:validation:Optional
	SoaRetry *float64 `json:"soaRetry,omitempty" tf:"soa_retry,omitempty"`

	// (Number) Time to live for records at zone apex
	// Time to live for records at zone apex
	// +kubebuilder:validation:Optional
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// zone forwarders. A custom port can be specified for each forwarder using a standard format IP_ADDRESS port PORT
	// Per-zone forwarders. A custom port can be specified for each forwarder using a standard format IP_ADDRESS port PORT
	// +kubebuilder:validation:Optional
	ZoneForwarders []*string `json:"zoneForwarders,omitempty" tf:"zone_forwarders,omitempty"`

	// (String) Zone name (FQDN)
	// Zone name (FQDN)
	// +kubebuilder:validation:Optional
	ZoneName *string `json:"zoneName,omitempty" tf:"zone_name,omitempty"`
}

// ZoneSpec defines the desired state of Zone
type ZoneSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ZoneParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ZoneInitParameters `json:"initProvider,omitempty"`
}

// ZoneStatus defines the observed state of Zone.
type ZoneStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ZoneObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Zone is the Schema for the Zones API. FreeIPA DNS Zone resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,freeipa}
type Zone struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.zoneName) || (has(self.initProvider) && has(self.initProvider.zoneName))",message="spec.forProvider.zoneName is a required parameter"
	Spec   ZoneSpec   `json:"spec"`
	Status ZoneStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ZoneList contains a list of Zones
type ZoneList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Zone `json:"items"`
}

// Repository type metadata.
var (
	Zone_Kind             = "Zone"
	Zone_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Zone_Kind}.String()
	Zone_KindAPIVersion   = Zone_Kind + "." + CRDGroupVersion.String()
	Zone_GroupVersionKind = CRDGroupVersion.WithKind(Zone_Kind)
)

func init() {
	SchemeBuilder.Register(&Zone{}, &ZoneList{})
}
