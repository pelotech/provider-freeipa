// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PolicyHostMembershipInitParameters struct {

	// (String, Deprecated) deprecated Host to add to the HBAC policy
	// **deprecated** Host to add to the HBAC policy
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// (String, Deprecated) deprecated Hostgroup to add to the HBAC policy
	// **deprecated** Hostgroup to add to the HBAC policy
	Hostgroup *string `json:"hostgroup,omitempty" tf:"hostgroup,omitempty"`

	// (List of String) List of hostgroups to add to the HBAC policy
	// List of hostgroups to add to the HBAC policy
	Hostgroups []*string `json:"hostgroups,omitempty" tf:"hostgroups,omitempty"`

	// (List of String) List of hosts to add to the HBAC policy
	// List of hosts to add to the HBAC policy
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// (String) Unique identifier to differentiate multiple HBAC policy host membership resources on the same HBAC policy. Manadatory for using hosts/hostgroups configurations.
	// Unique identifier to differentiate multiple HBAC policy host membership resources on the same HBAC policy. Manadatory for using hosts/hostgroups configurations.
	Identifier *string `json:"identifier,omitempty" tf:"identifier,omitempty"`

	// (String) HBAC policy name
	// HBAC policy name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type PolicyHostMembershipObservation struct {

	// (String, Deprecated) deprecated Host to add to the HBAC policy
	// **deprecated** Host to add to the HBAC policy
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// (String, Deprecated) deprecated Hostgroup to add to the HBAC policy
	// **deprecated** Hostgroup to add to the HBAC policy
	Hostgroup *string `json:"hostgroup,omitempty" tf:"hostgroup,omitempty"`

	// (List of String) List of hostgroups to add to the HBAC policy
	// List of hostgroups to add to the HBAC policy
	Hostgroups []*string `json:"hostgroups,omitempty" tf:"hostgroups,omitempty"`

	// (List of String) List of hosts to add to the HBAC policy
	// List of hosts to add to the HBAC policy
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// (String) ID of the resource
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Unique identifier to differentiate multiple HBAC policy host membership resources on the same HBAC policy. Manadatory for using hosts/hostgroups configurations.
	// Unique identifier to differentiate multiple HBAC policy host membership resources on the same HBAC policy. Manadatory for using hosts/hostgroups configurations.
	Identifier *string `json:"identifier,omitempty" tf:"identifier,omitempty"`

	// (String) HBAC policy name
	// HBAC policy name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type PolicyHostMembershipParameters struct {

	// (String, Deprecated) deprecated Host to add to the HBAC policy
	// **deprecated** Host to add to the HBAC policy
	// +kubebuilder:validation:Optional
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// (String, Deprecated) deprecated Hostgroup to add to the HBAC policy
	// **deprecated** Hostgroup to add to the HBAC policy
	// +kubebuilder:validation:Optional
	Hostgroup *string `json:"hostgroup,omitempty" tf:"hostgroup,omitempty"`

	// (List of String) List of hostgroups to add to the HBAC policy
	// List of hostgroups to add to the HBAC policy
	// +kubebuilder:validation:Optional
	Hostgroups []*string `json:"hostgroups,omitempty" tf:"hostgroups,omitempty"`

	// (List of String) List of hosts to add to the HBAC policy
	// List of hosts to add to the HBAC policy
	// +kubebuilder:validation:Optional
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// (String) Unique identifier to differentiate multiple HBAC policy host membership resources on the same HBAC policy. Manadatory for using hosts/hostgroups configurations.
	// Unique identifier to differentiate multiple HBAC policy host membership resources on the same HBAC policy. Manadatory for using hosts/hostgroups configurations.
	// +kubebuilder:validation:Optional
	Identifier *string `json:"identifier,omitempty" tf:"identifier,omitempty"`

	// (String) HBAC policy name
	// HBAC policy name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

// PolicyHostMembershipSpec defines the desired state of PolicyHostMembership
type PolicyHostMembershipSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PolicyHostMembershipParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PolicyHostMembershipInitParameters `json:"initProvider,omitempty"`
}

// PolicyHostMembershipStatus defines the observed state of PolicyHostMembership.
type PolicyHostMembershipStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicyHostMembershipObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// PolicyHostMembership is the Schema for the PolicyHostMemberships API. FreeIPA HBAC policy host membership resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,freeipa}
type PolicyHostMembership struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   PolicyHostMembershipSpec   `json:"spec"`
	Status PolicyHostMembershipStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyHostMembershipList contains a list of PolicyHostMemberships
type PolicyHostMembershipList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PolicyHostMembership `json:"items"`
}

// Repository type metadata.
var (
	PolicyHostMembership_Kind             = "PolicyHostMembership"
	PolicyHostMembership_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PolicyHostMembership_Kind}.String()
	PolicyHostMembership_KindAPIVersion   = PolicyHostMembership_Kind + "." + CRDGroupVersion.String()
	PolicyHostMembership_GroupVersionKind = CRDGroupVersion.WithKind(PolicyHostMembership_Kind)
)

func init() {
	SchemeBuilder.Register(&PolicyHostMembership{}, &PolicyHostMembershipList{})
}
