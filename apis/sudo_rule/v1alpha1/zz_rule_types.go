// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RuleInitParameters struct {

	// (String) Command category the sudo rule is applied to (allowed value: all)
	// Command category the sudo rule is applied to (allowed value: all)
	Commandcategory *string `json:"commandcategory,omitempty" tf:"commandcategory,omitempty"`

	// (String) Sudo rule description
	// Sudo rule description
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) Enable this sudo rule
	// Enable this sudo rule
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) Host category the sudo rule is applied to (allowed value: all)
	// Host category the sudo rule is applied to (allowed value: all)
	Hostcategory *string `json:"hostcategory,omitempty" tf:"hostcategory,omitempty"`

	// (String) Name of the sudo rule
	// Name of the sudo rule
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Number) Sudo rule order (must be unique)
	// Sudo rule order (must be unique)
	Order *float64 `json:"order,omitempty" tf:"order,omitempty"`

	// (String) Run as group category the sudo rule is applied to (allowed value: all)
	// Run as group category the sudo rule is applied to (allowed value: all)
	Runasgroupcategory *string `json:"runasgroupcategory,omitempty" tf:"runasgroupcategory,omitempty"`

	// (String) Run as user category the sudo rule is applied to (allowed value: all)
	// Run as user category the sudo rule is applied to (allowed value: all)
	Runasusercategory *string `json:"runasusercategory,omitempty" tf:"runasusercategory,omitempty"`

	// (String) User category the sudo rule is applied to (allowed value: all)
	// User category the sudo rule is applied to (allowed value: all)
	Usercategory *string `json:"usercategory,omitempty" tf:"usercategory,omitempty"`
}

type RuleObservation struct {

	// (String) Command category the sudo rule is applied to (allowed value: all)
	// Command category the sudo rule is applied to (allowed value: all)
	Commandcategory *string `json:"commandcategory,omitempty" tf:"commandcategory,omitempty"`

	// (String) Sudo rule description
	// Sudo rule description
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) Enable this sudo rule
	// Enable this sudo rule
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) Host category the sudo rule is applied to (allowed value: all)
	// Host category the sudo rule is applied to (allowed value: all)
	Hostcategory *string `json:"hostcategory,omitempty" tf:"hostcategory,omitempty"`

	// (String) ID of the resource
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Name of the sudo rule
	// Name of the sudo rule
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Number) Sudo rule order (must be unique)
	// Sudo rule order (must be unique)
	Order *float64 `json:"order,omitempty" tf:"order,omitempty"`

	// (String) Run as group category the sudo rule is applied to (allowed value: all)
	// Run as group category the sudo rule is applied to (allowed value: all)
	Runasgroupcategory *string `json:"runasgroupcategory,omitempty" tf:"runasgroupcategory,omitempty"`

	// (String) Run as user category the sudo rule is applied to (allowed value: all)
	// Run as user category the sudo rule is applied to (allowed value: all)
	Runasusercategory *string `json:"runasusercategory,omitempty" tf:"runasusercategory,omitempty"`

	// (String) User category the sudo rule is applied to (allowed value: all)
	// User category the sudo rule is applied to (allowed value: all)
	Usercategory *string `json:"usercategory,omitempty" tf:"usercategory,omitempty"`
}

type RuleParameters struct {

	// (String) Command category the sudo rule is applied to (allowed value: all)
	// Command category the sudo rule is applied to (allowed value: all)
	// +kubebuilder:validation:Optional
	Commandcategory *string `json:"commandcategory,omitempty" tf:"commandcategory,omitempty"`

	// (String) Sudo rule description
	// Sudo rule description
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) Enable this sudo rule
	// Enable this sudo rule
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) Host category the sudo rule is applied to (allowed value: all)
	// Host category the sudo rule is applied to (allowed value: all)
	// +kubebuilder:validation:Optional
	Hostcategory *string `json:"hostcategory,omitempty" tf:"hostcategory,omitempty"`

	// (String) Name of the sudo rule
	// Name of the sudo rule
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Number) Sudo rule order (must be unique)
	// Sudo rule order (must be unique)
	// +kubebuilder:validation:Optional
	Order *float64 `json:"order,omitempty" tf:"order,omitempty"`

	// (String) Run as group category the sudo rule is applied to (allowed value: all)
	// Run as group category the sudo rule is applied to (allowed value: all)
	// +kubebuilder:validation:Optional
	Runasgroupcategory *string `json:"runasgroupcategory,omitempty" tf:"runasgroupcategory,omitempty"`

	// (String) Run as user category the sudo rule is applied to (allowed value: all)
	// Run as user category the sudo rule is applied to (allowed value: all)
	// +kubebuilder:validation:Optional
	Runasusercategory *string `json:"runasusercategory,omitempty" tf:"runasusercategory,omitempty"`

	// (String) User category the sudo rule is applied to (allowed value: all)
	// User category the sudo rule is applied to (allowed value: all)
	// +kubebuilder:validation:Optional
	Usercategory *string `json:"usercategory,omitempty" tf:"usercategory,omitempty"`
}

// RuleSpec defines the desired state of Rule
type RuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RuleParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RuleInitParameters `json:"initProvider,omitempty"`
}

// RuleStatus defines the observed state of Rule.
type RuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Rule is the Schema for the Rules API. FreeIPA Sudo rule resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,freeipa}
type Rule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   RuleSpec   `json:"spec"`
	Status RuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RuleList contains a list of Rules
type RuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Rule `json:"items"`
}

// Repository type metadata.
var (
	Rule_Kind             = "Rule"
	Rule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Rule_Kind}.String()
	Rule_KindAPIVersion   = Rule_Kind + "." + CRDGroupVersion.String()
	Rule_GroupVersionKind = CRDGroupVersion.WithKind(Rule_Kind)
)

func init() {
	SchemeBuilder.Register(&Rule{}, &RuleList{})
}
